version: '3.8'

services:
  # Servicio de Base de Datos PostgreSQL
  db:
    image: postgres:14-alpine
    container_name: postgres_rdwr
    restart: always
    environment:
      # Variables usadas por la imagen oficial de PostgreSQL
      POSTGRES_DB: medisupplydb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      # Mapea el puerto del contenedor (5432) al puerto local (5432)
      - "5432:5432"
    healthcheck: # <--- Esto es lo que falta
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5


  # Servicio del Microservicio Flask
  app:
    image: 120569610818.dkr.ecr.us-east-1.amazonaws.com/cdk-exp-container-assets-120569610818-us-east-1:59f92b518e6e9e4433275d01381bb34b5c19641d-users
    container_name: routes
    depends_on: # <--- La dependencia debe ser condicional
      db:
        condition: service_healthy
    environment:
      # Variables de entorno para la aplicación (deben coincidir con config.py)
      # DB_HOST debe ser el nombre del servicio de la DB (db)
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      # Asegura que la inicialización se ejecute
      RUN_DB_INIT_ON_STARTUP: "True"
    ports:
      - "8080:8080"
    # Este comando es una práctica de robustez para esperar que la DB esté lista.
    # Le da a PostgreSQL tiempo para inicializarse antes de que Python intente conectarse.
    command: ["sh", "-c", "sleep 5 && python app.py"]


